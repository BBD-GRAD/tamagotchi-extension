@page "/googlecallback"
@inject HttpClient Http
@inject NavigationService Navigation



@code {
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation._navigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string code = query["code"];
        if (!string.IsNullOrEmpty(code))
        {
            await ExchangeCodeForToken(code);
        }
    }

    private async Task ExchangeCodeForToken(string code)
    {
        string clientId = "794918693940-j1kb0o1gi3utki6th2u6nmoc2i40kqbm.apps.googleusercontent.com";
        string clientSecret = "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";
        string redirectUri = "http://localhost:7117/GoogleCallback";
        var requestBody = new Dictionary<string, string>
        {
            { "code", code },
            { "client_id", clientId },
            { "client_secret", clientSecret },
            { "redirect_uri", redirectUri },
            { "grant_type", "authorization_code" }
        };

        var response = await Http.PostAsync("https://oauth2.googleapis.com/token", new FormUrlEncodedContent(requestBody));
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var tokens = System.Text.Json.JsonSerializer.Deserialize<GoogleOAuthTokens>(responseContent);
            // Use tokens.IdToken and tokens.RefreshToken as needed
            Console.WriteLine("Authentication successful!");
        }
        else
        {
            Console.WriteLine("Error during token exchange.");
        }
    }

    private class GoogleOAuthTokens
    {
        public string IdToken { get; set; }
        public string RefreshToken { get; set; }
    }
}