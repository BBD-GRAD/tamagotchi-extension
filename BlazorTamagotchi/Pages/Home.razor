@page "/"
@using BlazorTamagotchi.Models
@inject MemoryClass memoryClass

<PageTitle>Home</PageTitle>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Randomly Moving Image</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
        }

        .my-body {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .tamagotchi {
            border-radius: 1rem;
            width: 100%;
            max-width: 350px;
            height: 550px;
            background-color: darkred;
            display: flex;
            flex-direction: column;
            padding: 1rem 1.5rem 3rem 1.5rem;
            box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.2), 0px 6px 0px rgba(0, 0, 0, 0.8);
        }

        .tamagotchi-screen {
            flex: 2;
            width: 100%;
            display: flex;
        }

        .tamagotchi-inner-screen {
            background-color: gray;
            flex: 1;
            border: solid 0.25rem black;
            border-radius: 1rem;
            display: flex;
            flex-direction: column;
            padding: 0.5rem;
        }

        .stats-top {
            flex: 1;
            display: flex;
            justify-content: space-between;
        }

        .icon {
            height: 2rem;
            width: 2rem;
        }

        .health-stats-wrapper {
            display: flex;
            gap: 0.25rem;
        }

        .health-stats {
            font-size: 0.65rem;
        }

        .tamagotchi-pet-playground {
            flex: 4;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }

        .tamagotchi-pet {
            height: 8rem;
            position: absolute;
        }

        .stats-bottom {
            flex: 1;
            display: flex;
            justify-content: space-between;
            gap: 0.25rem;
        }

        .tamagotchi-controls {
            flex: 1;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .control-button {
            width: 3rem;
            height: 3rem;
            background-color: darkgray;
            border-radius: 50%;
            box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.2), 0px 3px 0px rgba(0, 0, 0, 0.8);
        }

            .control-button:nth-child(2n) {
                transform: translateY(2rem);
            }

        .pop-up-backdrop {
            height: 100vh;
            width: 100vw;
            position: absolute;
            display: none;
            top: 0;
            left: 0;
            background-color: rgba(0,0,0,0.4);
            z-index: 99;
        }

    </style>
</head>
<body>
    @code {
        private void AuthenticateUser()
        {
            var url = BuildGoogleOAuthUrl();
            _navigationService._navigationManager.NavigateTo(url, true);
        }
    }
        <div class="pop-up-backdrop justify-content-center align-items-center" id="settings">
        <div class="card bg-white w-50 w-sd-75 p-2 shadow rounded-3">
            <h3 >Settings</h3>
            SetTheme
            @code {
            }
            <select class="mb-4 p-2" onchange="changeTamagotchiColor(this)">
                <option value="darkred">Red</option>
                <option value="darkgreen">Green</option>
                <option value="darkblue">Blue</option>
                <option value="darkgray">Black</option>
            </select>
            <button class="btn btn-outline-success" onclick="closeElement(settings)">submit</button>
        </div>
       </div>

        <div class="pop-up-backdrop justify-content-center align-items-center" id="create-pet">
            <div class="card bg-white w-50 w-sd-75 p-2 shadow rounded-3">
                <h3>Create a pet</h3>
            @code {
                private string inputValue;
            }
            <input type="text" class="my-4 p-2" placeholder="pet name" @bind="inputValue"/>

            <button class="btn btn-outline-success" onclick="closeElement(createPet)" @onfocus="@(() => CreatePet(inputValue))">submit</button>
            </div>

    </div>
    <div class="my-body">
        <div class="tamagotchi">
            <p class="fw-bold text-light">@PetName</p>
            <div class="tamagotchi-screen">
                <div class="tamagotchi-inner-screen">
                    <div class="stats-top">
                        <div class="health-stats-wrapper">
                            <img src="./icons/account.png" @onclick="AuthenticateUser" class="icon" />
                            <div class="health-stats fw-bold">
                                <div id="hp-stat">HP:@Hp.ToString("N0")</div>
                                <div id="xp-stat">XP:@Xp</div>
                                <div id="xp-stat">HighScore:@currentHighScore</div>
                            </div>
                        </div>
                        <div>

                        <img src="./icons/settings.png" class="icon" onclick="openElement(settings)" />
                        <img src="./icons/save.png" class="icon" @onclick="Save" />
                        </div>

                    </div>
                    <div class="tamagotchi-pet-playground">
                        @if (pet == null)
                        {
                            <img src="./icons/replay.png" class="icon fade-in-out" onclick="openElement(createPet)" />
                        }
                        else
                        { 
                            <img src="./images/pet.png" class="tamagotchi-pet" id="movingImage" />
                        }
                    </div>
                    <div class="stats-bottom">
                        <div class="d-flex align-items-center"> <img src="./icons/food.png" class="icon" /> <div id="food-stat">@Food.ToString("N0")</div></div>
                        <div class="d-flex align-items-center"> <img src="./icons/stamina.png" class="icon" />@Stamina.ToString("N0")</div>
                        <div class="d-flex align-items-center"><img src="./icons/water.png" class="icon <%= @OurWater <= 0 ? 'fade-in-out' : '' %>" /> <div id="water-stat">@OurWater.ToString("N0")</div></div>
                    </div>
                    
                </div>
            </div>
            <div class="tamagotchi-controls">
                <button @onclick="Feed">Eat</button>
                <button @onclick="Rest">Rest</button>
                <button @onclick="Water">Drink</button>
            </div>
        </div>
    </div>
    <script>

        const settings = document.getElementById("settings");
        const createPet = document.getElementById("create-pet");

        function changeTamagotchiColor(selectElement) {
            var tamagotchi = document.querySelector('.tamagotchi');
            var selectedColor = selectElement.value;
            tamagotchi.style.backgroundColor = selectedColor;
            DotNet.invokeMethodAsync('SetTheme', 'HandleJsInvoke', selectedColor);
        }

        function openElement(element){
                element.style.display = 'flex';
        }

            function closeElement(element) {
                element.style.display = 'none';
            }

        var img = document.getElementById('movingImage');
        function getRandomNumber(min, max) {
            return Math.random() * (max - min) + min;
        }

        function moveImage() {
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            var playground = document.querySelector('.tamagotchi-pet-playground');
            var playgroundWidth = playground.clientWidth;
            var playgroundHeight = playground.clientHeight;

            var maxX = playgroundWidth - img.width;
            var maxY = playgroundHeight - img.height;

            var newX = getRandomNumber(0, maxX);
            var newY = getRandomNumber(0, maxY);

            img.style.left = newX + 'px';
            img.style.top = newY + 'px';
        }
        moveImage();
        setInterval(moveImage, 3000);

    </script>
</body>
</html>


